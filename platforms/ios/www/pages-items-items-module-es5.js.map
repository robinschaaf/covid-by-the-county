{"version":3,"sources":["webpack:///src/app/pages/items/items.html","webpack:///src/app/pages/items/items.module.ts","webpack:///src/app/pages/items/items.page.ts","webpack:///src/app/services/HttpService.ts","webpack:///src/app/services/list-view-service.ts","webpack:///src/app/services/mail-chimp-service.ts","webpack:///src/app/services/validation.ts"],"names":["ItemsPageModule","imports","forChild","path","component","declarations","schemas","ItemsPage","navCtrl","textViewService","spinnerService","imageGalleryService","searchBarService","checkBoxService","animationService","parallaxService","wizardService","tabsService","listViewService","loginService","registerService","splashScreenService","httpService","validationService","mailChimpService","mapsService","qRCodeService","radioButtonService","rangeService","toggleService","selectService","actionSheetService","timeLineService","formService","commentService","alertCtrl","profileService","segmentService","scrollSegmentService","paymentService","alertService","newPasswordService","forgetPasswordService","route","pages","listServices","componentName","snapshot","paramMap","get","service","getAllThemes","title","getTitle","page","SUBSCRIBE","showMailChimpForm","showPrompt","setMailChimpForm","navigateForward","url","create","header","message","cssClass","inputs","name","placeholder","buttons","text","handler","data","isMail","email","sendData","subscribe","_","console","log","hideMailChimp","err","JSON","stringify","alertDialog","present","template","providers","HttpService","http","encodeURI","providedIn","ListViewService","getId","getDataForTheme","menuItem","MailChimpService","mailChimp","localStorage","getItem","mailChimpLocal","isVisible","setItem","ValidationService","re","test"],"mappings":"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","file":"pages-items-items-module-es5.js","sourcesContent":["export default \"<!-- Header -->\\r\\n<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>{{title}}</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n<!-- Content -->\\r\\n<ion-content>\\r\\n  <ion-grid class=\\\"ion-no-padding\\\">\\r\\n    <ion-row>\\r\\n      <ion-col size=\\\"12\\\" class=\\\"ion-no-padding\\\">\\r\\n        <ion-list *ngIf=\\\"pages.length\\\">\\r\\n          <ion-item class=\\\"ion-menu-toggle\\\" *ngFor=\\\"let item of pages\\\" (click)=\\\"openPage(item)\\\">\\r\\n            <ion-label>\\r\\n              <h1 class=\\\"text-size-md text-color-primary font-light\\\">{{item.title}}</h1>\\r\\n            </ion-label>\\r\\n          </ion-item>\\r\\n        </ion-list>\\r\\n      </ion-col>\\r\\n    </ion-row>\\r\\n  </ion-grid>\\r\\n</ion-content>\\r\\n\";","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { ItemsPage } from './items.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: '',\r\n        component: ItemsPage\r\n      }\r\n    ])\r\n  ],\r\n  declarations: [ItemsPage],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\nexport class ItemsPageModule {}\r\n","import { Component } from '@angular/core';\r\nimport { NavController } from '@ionic/angular';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AlertController } from '@ionic/angular';\r\nimport { HttpService } from '../../services/HttpService';\r\nimport { ValidationService } from '../../services/validation';\r\nimport { MailChimpService } from '../../services/mail-chimp-service';\r\n\r\nimport { IService } from '../../services/IService';\r\n\r\nimport { CheckBoxService } from '../../services/check-box-service';\r\nimport { AnimationService } from '../../services/animation-service';\r\nimport { TextViewService } from '../../services/text-view-service';\r\nimport { SpinnerService } from '../../services/spinner-service';\r\nimport { SplashScreenService } from '../../services/splash-screen-service';\r\nimport { SearchBarService } from '../../services/search-bar-service';\r\nimport { WizardService } from '../../services/wizard-service';\r\nimport { TabsService } from '../../services/tabs-service';\r\nimport { LoginService } from '../../services/login-service';\r\nimport { RegisterService } from '../../services/register-service';\r\nimport { ListViewService } from '../../services/list-view-service';\r\nimport { ParallaxService } from '../../services/parallax-service';\r\nimport { ImageGalleryService } from '../../services/image-gallery-service';\r\nimport { MapsService } from '../../services/maps-service';\r\nimport { QRCodeService } from '../../services/qrcode-service';\r\nimport { RadioButtonService } from '../../services/radio-button-service';\r\nimport { RangeService } from '../../services/range-service';\r\nimport { ToggleService } from '../../services/toggle-service';\r\nimport { SelectService } from '../../services/select-service';\r\nimport { ActionSheetService } from '../../services/action-sheet-service';\r\nimport { TimeLineService } from '../../services/time-line-service';\r\nimport { FormService } from '../../services/form-service';\r\nimport { CommentService } from '../../services/comment-service';\r\nimport { ProfileService } from '../../services/profile-service';\r\nimport { PaymentService } from '../../services/payment-service';\r\nimport { SegmentService } from '../../services/segment-service';\r\nimport { ScrollSegmentService } from '../../services/scroll-segment-service';\r\nimport { AlertService } from '../../services/alert-service';\r\nimport { NewPasswordService } from './../../services/new-password-services';\r\nimport { ForgetPasswordService } from './../../services/forget-password-services';\r\nimport { AppSettings } from './../../services/app-settings';\r\n\r\n@Component({\r\n    templateUrl: 'items.html',\r\n    providers: [\r\n        MailChimpService, TextViewService, SpinnerService,\r\n        SplashScreenService, LoginService, RegisterService, AnimationService,\r\n        SearchBarService, CheckBoxService, WizardService, TabsService, ParallaxService,\r\n        ListViewService, ImageGalleryService, NewPasswordService, ForgetPasswordService,\r\n        HttpService, ValidationService, MapsService, QRCodeService, RadioButtonService, RangeService,\r\n        ToggleService, SelectService, ActionSheetService, TimeLineService, FormService, CommentService,\r\n        ProfileService, SegmentService, AlertService, PaymentService, ScrollSegmentService]\r\n})\r\nexport class ItemsPage {\r\n    title: string;\r\n    componentName: string;\r\n    pages: any = {};\r\n    listServices: { [key: string]: IService; } = {};\r\n    service: IService;\r\n\r\n    // services: array\r\n    constructor(public navCtrl: NavController,\r\n        private textViewService: TextViewService,\r\n        private spinnerService: SpinnerService,\r\n        private imageGalleryService: ImageGalleryService,\r\n        private searchBarService: SearchBarService,\r\n        private checkBoxService: CheckBoxService,\r\n        private animationService: AnimationService,\r\n        private parallaxService: ParallaxService,\r\n        private wizardService: WizardService,\r\n        private tabsService: TabsService,\r\n        private listViewService: ListViewService,\r\n        private loginService: LoginService,\r\n        private registerService: RegisterService,\r\n        private splashScreenService: SplashScreenService,\r\n        private httpService: HttpService,\r\n        private validationService: ValidationService,\r\n        private mailChimpService: MailChimpService,\r\n        private mapsService: MapsService,\r\n        private qRCodeService: QRCodeService,\r\n        private radioButtonService: RadioButtonService,\r\n        private rangeService: RangeService,\r\n        private toggleService: ToggleService,\r\n        private selectService: SelectService,\r\n        private actionSheetService: ActionSheetService,\r\n        private timeLineService: TimeLineService,\r\n        private formService: FormService,\r\n        private commentService: CommentService,\r\n        public alertCtrl: AlertController,\r\n        private profileService: ProfileService,\r\n        private segmentService: SegmentService,\r\n        private scrollSegmentService: ScrollSegmentService,\r\n        private paymentService: PaymentService,\r\n        private alertService: AlertService,\r\n        private newPasswordService: NewPasswordService,\r\n        private forgetPasswordService: ForgetPasswordService,\r\n        private route: ActivatedRoute) {\r\n\r\n        this.listServices = {\r\n            'checkBoxes': this.checkBoxService,\r\n            'animation': this.animationService,\r\n            'login': this.loginService,\r\n            'register': this.registerService,\r\n            'imageGallery': this.imageGalleryService,\r\n            'textViews': this.textViewService,\r\n            'spinner': this.spinnerService,\r\n            'parallax': this.parallaxService,\r\n            'wizard': this.wizardService,\r\n            'searchBars': this.searchBarService,\r\n            'tabs': this.tabsService,\r\n            'listViews': this.listViewService,\r\n            'splashScreens': this.splashScreenService,\r\n            'maps': this.mapsService,\r\n            'timeline': this.timeLineService,\r\n            'qrcode': this.qRCodeService,\r\n            'radioButton': this.radioButtonService,\r\n            'range': this.rangeService,\r\n            'toggle': this.toggleService,\r\n            'select': this.selectService,\r\n            'form': this.formService,\r\n            'comment': this.commentService,\r\n            'profile': this.profileService,\r\n            'actionSheet': this.actionSheetService,\r\n            'segment': this.segmentService,\r\n            'scrollSegment': this.scrollSegmentService,\r\n            'payment': this.paymentService,\r\n            'alert': this.alertService,\r\n            'newPassword': this.newPasswordService,\r\n            'forgetPassword': this.forgetPasswordService\r\n        };\r\n\r\n        this.componentName = this.route.snapshot.paramMap.get('type');\r\n        this.service = this.listServices[this.componentName];\r\n\r\n        if (this.service) {\r\n            this.pages = this.service.getAllThemes();\r\n            this.title = this.service.getTitle();\r\n        }\r\n    }\r\n\r\n    openPage(page: any) {\r\n        if (AppSettings.SUBSCRIBE) {\r\n          if (!this.mailChimpService.showMailChimpForm()) {\r\n            this.showPrompt();\r\n            this.mailChimpService.setMailChimpForm(true);\r\n          } else {\r\n            this.navCtrl.navigateForward([page.url], {});\r\n          }\r\n        } else {\r\n            this.navCtrl.navigateForward([page.url], {});\r\n        }\r\n    }\r\n\r\n    async showPrompt() {\r\n        const alertDialog = await this.alertCtrl.create({\r\n            header: 'STAY TUNED FOR NEW THEMES AND FREEBIES',\r\n            message: 'SUBSCRIBE TO <br> OUR NEWSLETTER',\r\n            cssClass: 'basic-dialog',\r\n            inputs: [\r\n                {\r\n                    name: 'email',\r\n                    placeholder: 'Your e-mail'\r\n                },\r\n            ],\r\n            buttons: [\r\n                {\r\n                    text: 'Cancel'\r\n                },\r\n                {\r\n                    text: 'Send',\r\n                    handler: data => {\r\n                        if (data) {\r\n                            if (this.validationService.isMail(data.email)) {\r\n                                this.httpService.sendData(data.email).subscribe(\r\n                                    _ => {\r\n                                        console.log('sucess')\r\n                                        this.mailChimpService.hideMailChimp();\r\n                                    }, err => {\r\n                                        console.log('err')\r\n                                        console.log(JSON.stringify(err))\r\n                                    }, null);\r\n                            } else {\r\n                                return false;\r\n                            }\r\n                        } else {\r\n                            return false;\r\n                        }\r\n                    }\r\n                }\r\n            ]\r\n        });\r\n        alertDialog.present();\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\n\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class HttpService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  sendData(email: string) {\r\n    let url = 'https://facebook.us14.list-manage.com/subscribe/post-json?u=2c0f7baa8dc004a62ff3922e3&id=456928d791&EMAIL='\r\n    + encodeURI(email) + '&b_2c0f7baa8dc004a62ff3922e3_456928d791';\r\n    return this.http.get(url);\r\n  }\r\n}","import { IService } from './IService';\r\n\r\nexport class ListViewService implements IService {\r\n\r\n  constructor() { }\r\n\r\n  getId = (): string => 'listViews';\r\n\r\n  getTitle = (): string => 'List views';\r\n\r\n  // Submenu for list\r\n  getAllThemes = (): Array<any> => {\r\n    return [\r\n      { 'url': 'subitems/expandable', 'title': 'Expandable', 'theme': 'expandable'},\r\n      { 'url': 'subitems/dragAndDrop', 'title': 'Drag&Drop', 'theme': 'dragAndDrop'},\r\n      { 'url': 'subitems/swipeToDismiss', 'title': 'Swipe-to-dismiss', 'theme': 'swipeToDismiss'},\r\n      { 'url': 'subitems/googleCards', 'title': 'Google Cards', 'theme': 'googleCards'},\r\n    ];\r\n  }\r\n\r\n  getDataForTheme = (menuItem: any): Array<any> => {\r\n    return [];\r\n  }\r\n\r\n  load(url: string) {\r\n    return null;\r\n  }\r\n}\r\n","export class MailChimpService {\r\n\r\n  constructor() { }\r\n\r\n  showMailChimpForm() {\r\n    const mailChimp = localStorage.getItem('mailChimp') === 'true';\r\n    const mailChimpLocal = localStorage.getItem('mailChimpLocal') === 'true';\r\n    if (mailChimp) {\r\n      return false;\r\n    } else {\r\n      return mailChimpLocal;\r\n    }\r\n  }\r\n\r\n  setMailChimpForm(isVisible: boolean) {\r\n    localStorage.setItem('mailChimpLocal', isVisible + '');\r\n  }\r\n\r\n  hideMailChimp() {\r\n    localStorage.setItem('mailChimp', 'true');\r\n  }\r\n}\r\n","/**\r\n * Created by DRAGAN on 3/22/2017.\r\n */\r\nexport class ValidationService {\r\n\r\n  constructor() { }\r\n\r\n  isMail(email: string) {\r\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(email);\r\n  }\r\n}\r\n"]}